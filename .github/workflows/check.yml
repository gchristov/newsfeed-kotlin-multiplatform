name: check

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: "17"
  JAVA_DISTRIBUTION: "zulu"
  XCODE_VERSION: "16.2"
  XCODE_CACHE: "CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++"
  IOS_SIMULATOR: "platform=iOS Simulator,name=iPhone 16,OS=18.2"
  ANDROID_COMPILE_SDK: "31"
  ANDROID_EMULATOR_ARCHITECTURE: "x86_64"
  GUARDIAN_API_KEY: ${{ secrets.GUARDIAN_API_KEY }}
  GUARDIAN_API_URL: ${{ secrets.GUARDIAN_API_URL }}

jobs:
  check-unit-test:
    runs-on: ubuntu-20.04
    concurrency:
      group: ${{ github.ref }}-check-unit-test
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Gradle
        uses: ./.github/actions/setup-gradle
        with:
          cache-key: check-unit-test
      - name: Unit test
        run: |
          set -o pipefail && 
          ./gradlew --no-daemon --continue testDebugUnitTest
      - name: Generate test report
        uses: mikepenz/action-junit-report@v4
        if: always() # Ensure all test reports are collected, even after errors
        with:
          report_paths: |
            **/TEST-*.xml
          check_name: 'check-unit-test-results'
      - name: Artifacts
        uses: actions/upload-artifact@v4
        if: always() # Ensure all artifacts are collected, even after errors
        with:
          name: Unit tests
          path: |
            **/TEST-*.xml

  ios-check-build:
    runs-on: macos-15
    concurrency:
      group: ${{ github.ref }}-ios-check-build
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Gradle
        uses: ./.github/actions/setup-gradle
        with:
          cache-key: ios-check-build
      - name: Set up Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      - name: Set up Xcode
        uses: irgaly/xcode-cache@v1
        with:
          key: ios-check-build-${{ github.workflow }}-${{ github.sha }}
          restore-keys: ios-check-build-${{ github.workflow }}-
      - name: Compile iOS appp
        run: |
          cd ios &&
          set -o pipefail && 
          xcodebuild ${{ env.XCODE_CACHE }} -workspace app.xcworkspace -scheme "app" -sdk iphonesimulator -destination '${{ env.IOS_SIMULATOR }}' build | tee xcodebuild.log | xcpretty &&
          cd ..
      - name: Artifacts
        uses: actions/upload-artifact@v4
        if: always() # Ensure all artifacts are collected, even after errors
        with:
          name: iOS Build
          path: |
            ios/xcodebuild.log
            ~/Library/Developer/Xcode/DerivedData/**/*.app
            ~/Library/Developer/Xcode/DerivedData/**/*.app.dSYM
            **/build
            **/secrets.properties

  ios-check-test:
    runs-on: macos-15
    concurrency:
      group: ${{ github.ref }}-ios-check-test
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Gradle
        uses: ./.github/actions/setup-gradle
        with:
          cache-key: ios-check-test
      - name: Set up Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      - name: Set up Xcode
        uses: irgaly/xcode-cache@v1
        with:
          key: ios-check-test-${{ github.workflow }}-${{ github.sha }}
          restore-keys: ios-check-test-${{ github.workflow }}-
      - name: iOS tests
        run: |
          cd ios &&
          set -o pipefail && 
          xcodebuild ${{ env.XCODE_CACHE }} -workspace app.xcworkspace -scheme "app" -sdk iphonesimulator -destination '${{ env.IOS_SIMULATOR }}' test | tee xcodebuild.log | xcpretty &&
          cd ..
      - name: Artifacts
        uses: actions/upload-artifact@v4
        if: always() # Ensure all artifacts are collected, even after errors
        with:
          name: iOS Tests
          path: |
            ios/xcodebuild.log

  android-check-build:
    runs-on: ubuntu-20.04
    concurrency:
      group: ${{ github.ref }}-android-check-build
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Gradle
        uses: ./.github/actions/setup-gradle
        with:
          cache-key: android-check-build
      - name: Compile Android app
        run: |
          set -o pipefail && 
          ./gradlew android:app:assembleDebug
      - name: Artifacts
        uses: actions/upload-artifact@v4
        if: always() # Ensure all artifacts are collected, even after errors
        with:
          name: Android Build
          path: |
            **/*.apk
            **/build
            **/secrets.properties

  android-check-test:
    runs-on: ubuntu-20.04
    concurrency:
      group: ${{ github.ref }}-android-check-test
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Set up Gradle
        uses: ./.github/actions/setup-gradle
        with:
          cache-key: android-check-test
      - name: Set up AVD
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_COMPILE_SDK }}
      - name: Generate AVD cache snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          arch: ${{ env.ANDROID_EMULATOR_ARCHITECTURE }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD cache snapshot"
      - name: Android tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_COMPILE_SDK }}
          arch: ${{ env.ANDROID_EMULATOR_ARCHITECTURE }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedAndroidTest
      - name: Artifacts
        uses: actions/upload-artifact@v4
        if: always() # Ensure all artifacts are collected, even after errors
        with:
          name: Android Tests
          path: |
            **/test-result.pb
